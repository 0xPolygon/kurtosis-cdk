worker_processes auto;

events { worker_connections 1024; }

http {
    # Upstreams
    upstream dashboard { server 127.0.0.1:800; }
    upstream l1        { server el-1-geth-lighthouse:8545; }
    upstream l2_geth   { server op-el-1-op-geth-op-node-001:8545; }
    upstream l2_node   { server op-cl-1-op-node-op-geth-001:8547; }
    upstream agglayer  { server agglayer:4444; }

    etag off;

    # Route by prefix (non-L2 routes)
    map $request_uri $backend {
        ~^/l1(?:/|$)        l1;
        ~^/agglayer(?:/|$)  agglayer;
        default             dashboard;
    }
    
    # JSON-RPC method-based routing for L2
    map $request_body $l2_backend {
        ~*"method"\s*:\s*"optimism_rollupConfig"      l2_node;
        ~*"method"\s*:\s*"optimism_outputAtBlock"     l2_node;
        default                                       l2_geth;
    }

    server {
        listen 60444 default_server;
        server_name _;

        # nice-to-have: add trailing slash
        location = /l1       { return 301 /l1/; }
        location = /l2       { return 301 /l2/; }
        location = /agglayer { return 301 /agglayer/; }

        # Special handling for L2 with method-based routing
        location /l2/ {
            # ---- CORS headers on all responses ----
            add_header Access-Control-Allow-Origin http://127.0.0.1:60444 always;
            add_header Vary "Origin" always;
            add_header Access-Control-Allow-Credentials "true" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Content-Type, X-Requested-With, *" always;
            add_header Access-Control-Max-Age "86400" always;

            # Preflight short-circuit
            if ($request_method = OPTIONS) {
                return 204;
            }

            # strip /l2 prefix
            rewrite ^/l2(?:/)?(.*)$ /$1 break;

            # Route based on JSON-RPC method in request body
            proxy_pass http://$l2_backend;

            # Keep requests same-origin from the app's POV
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Force no-cache
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0, s-maxage=0" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
            add_header Surrogate-Control "no-store" always;
            proxy_hide_header ETag;
        }

        # General catch-all for non-L2 routes
        location / {
            # ---- CORS headers on all responses ----
            # Tight allowlist:
            add_header Access-Control-Allow-Origin http://127.0.0.1:60444 always;
            add_header Vary "Origin" always;

            # Add this ONLY if you need cookies/auth headers:
            add_header Access-Control-Allow-Credentials "true" always;

            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Accept, Authorization, Content-Type, X-Requested-With, *" always;
            add_header Access-Control-Max-Age "86400" always;

            # Preflight short-circuit
            if ($request_method = OPTIONS) {
                return 204;
            }

            # strip /l1|/agglayer prefix (not l2, handled above)
            rewrite ^/(l1|agglayer)(?:/)?(.*)$ /$2 break;

            # Forward
            proxy_pass http://$backend;

            # Keep requests same-origin from the app's POV
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Optional: avoid upstream absolute redirects escaping your host
            # proxy_redirect off;

            # If upstream sends caching hints, still force no-cache
            add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0, s-maxage=0" always;
            add_header Pragma "no-cache" always;
            add_header Expires "0" always;
            add_header Surrogate-Control "no-store" always;
            proxy_hide_header ETag;
        }
    }
}
