
#+begin_src bash
export ETH_RPC_URL="$(kurtosis port print cdk-v1 el-1-geth-lighthouse rpc)"

kurtosis files download cdk-v1 zkevm /tmp
pol_addr=$(cat /tmp/zkevm/combined.json | jq -r '.polTokenAddress')
rollup_addr=$(cat /tmp/zkevm/combined.json | jq -r '.rollupAddress')

cast call $pol_addr 'balanceOf(address)(uint256)' 0x5b06837A43bdC3dD9F114558DAf4B26ed49842Ed

# do an approval for spend
cast send --private-key 0x183c492d0ba156041a7f31a1b188958a7a22eebadca741a7fe64436092dc3181 $pol_addr 'mint(address,uint256)' $rollup_addr 10000000000000000000000000
#+end_src


#+begin_src bash
export ETH_RPC_URL="$(kurtosis port print cdk-v1 zkevm-node-trusted-rpc-001 http-rpc)"
cast rpc zkevm_batchNumber
cast rpc zkevm_virtualBatchNumber
cast rpc zkevm_verifiedBatchNumber
#+end_src

Check DAC and Sequencing
#+begin_src bash
kurtosis files download cdk-v1 zkevm /tmp
cast call --rpc-url $(kurtosis port print cdk-v1 el-1-geth-lighthouse rpc) $(jq -r .rollupAddress /tmp/zkevm/combined.json) 'dataAvailabilityProtocol()(address)'
cast call --rpc-url $(kurtosis port print cdk-v1 el-1-geth-lighthouse rpc) $(jq -r .polygonDataCommitteeAddress /tmp/zkevm/combined.json) 'requiredAmountOfSignatures()(uint256)'

cat *.json | jq '.abi[] | select(.type != "receive")' | jq -s | polycli abi decode | sort -t: -k3 -u
docker run -it --net=container:f0ce09999e30 nicolaka/netshoot:latest /bin/bash
#+end_src


Confirm that we're on the correct fork
#+begin_src bash
export ETH_RPC_URL="$(kurtosis port print cdk-v1 el-1-geth-lighthouse rpc)"
cast call 0x2F50ef6b8e8Ee4E579B17619A92dE3E2ffbD8AD2 'rollupIDToRollupData(uint32)(address,uint64,address,uint64,bytes32,uint64,uint64,uint64,uint64,uint64,uint64,uint8)' 1
#+end_src
* Chaos

#+begin_src bash
apt install iproute2

#+end_src
