* Connect Directly to Container Network

#+begin_src bash
docker run -it --net=container:f0ce09999e30 nicolaka/netshoot:latest /bin/bash
#+end_src

* Chaos

#+begin_src bash
docker run --rm --name dsapp --network kt-cdk-v1 -it -v $PWD:/app ubuntu:latest /bin/bash

#inside container
apt update
apt install iproute2 curl
cd app
./dsapp client --server zkevm-node-sequencer-001:6900

# pumba
./.bin/github.com/alexei-led/pumba netem --duration 5m rate --rate 10bit dsapp
./.bin/github.com/alexei-led/pumba netem --duration 1m delay --time 100000 dsapp
./.bin/github.com/alexei-led/pumba pause --duration 1m dsapp
#+end_src

* Interruption

#+begin_src bash

docker run --rm --name dsapp --network kt-cdk-v1 -it -v $PWD:/app ubuntu:latest /bin/bash
cd app
./dsapp relay --server zkevm-node-sequencer-001:6900

docker network inspect kt-cdk-v1

client_ip="172.16.0.5"
server_ip="172.16.0.18"

# Drop
sudo iptables -I DOCKER -s $client_ip -d $server_ip -j DROP
sudo iptables -I DOCKER -s $server_ip -d $client_ip -j DROP

# Restore
sudo iptables -D DOCKER -s $client_ip -d $server_ip -j DROP
sudo iptables -D DOCKER -s $server_ip -d $client_ip -j DROP

docker run -it --net=container:dsapp nicolaka/netshoot:latest /bin/bash

sudo /usr/sbin/tcpkill -i br-7a2f0e0fd743 host $client_ip and host $server_ip
#+end_src

* Slow Outbound from Sequencer

#+begin_src bash
docker run -it --rm --name seqshoot --net=container:zkevm-node-sequencer-001--ede742f7c75e4d8d860c2a54756df797 nicolaka/netshoot:latest /bin/bash
./.bin/github.com/alexei-led/pumba netem --duration 1m --egress-port 6900 rate --rate 10bit seqshoot
#+end_src


docker exec --user root zkevm-bridge-proxy-001--11080806da274998a84dc3170d251565 cat /usr/local/etc/haproxy/haproxy.cfg

# Global settings
global
    log stdout format raw local0

# Default settings for all proxies
defaults
    log global
    mode http
    option httplog
    option dontlognull
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms

# Frontend configuration
frontend http_in
    bind *:80

    # CORS settings
    http-response set-header Access-Control-Allow-Origin "*"
    http-response set-header Access-Control-Allow-Methods "GET, DELETE, OPTIONS, POST, PUT"

    # Define ACLs for URL matching
    acl url_l1rpc path_beg /l1rpc
    acl url_l2rpc path_beg /l2rpc
    acl url_bridgeservice path_beg /bridgeservice

    # Use backend based on ACL match
    use_backend backend_l1rpc if url_l1rpc
    use_backend backend_l2rpc if url_l2rpc
    use_backend backend_bridgeservice if url_bridgeservice
    default_backend backend_default

# Backend configuration for /l1rpc
backend backend_l1rpc
    http-request set-path /
    server server1 172.16.0.10:8545

# Backend configuration for /l2rpc
backend backend_l2rpc
    http-request set-path /
    server server2 172.16.0.20:8123

# Backend configuration for /bridgeservice
backend backend_bridgeservice
    http-request set-path "%[path,regsub(^/bridgeservice/,/)]"
    server server3 172.16.0.26:8080

# Default backend configuration
backend backend_default
    server server4 172.16.0.28:80


