{{- /*
     *  ____   ___  _  __   ______  ___  _   _
     * |  _ \ / _ \| | \ \ / / ___|/ _ \| \ | |
     * | |_) | | | | |  \ V / |  _| | | |  \| |
     * |  __/| |_| | |___| || |_| | |_| | |\  |
     * |_|    \___/|_____|_| \____|\___/|_| \_|
     *   ____ ____  _  __
     *  / ___|  _ \| |/ /
     * | |   | | | | ' /
     * | |___| |_| | . \
     *  \____|____/|_|\_\
     *
     * This is an example configuration used for our kurtosis
     * automations. Note this file is actually a template is not
     * syntactically valid JSON.
     *
     * The authoritative docs for this file can be found here:
     * https://github.com/0xPolygonHermez/zkevm-prover/tree/develop/src/config
     *
     * The file below is broken down into a section for development
     * and another section for actual running of the prover /
     * executor. The development flags are included just for
     * completeness, but shouldn't be used unless your deliberately
     * trying to capture data or run some kind of test.
     *
     */ -}}

{

{{- /***************************************************************************
     *
     *  ____  ____   ___  ____  _   _  ____ _____ ___ ___  _   _
     * |  _ \|  _ \ / _ \|  _ \| | | |/ ___|_   _|_ _/ _ \| \ | |
     * | |_) | |_) | | | | | | | | | | |     | |  | | | | |  \| |
     * |  __/|  _ <| |_| | |_| | |_| | |___  | |  | | |_| | |\  |
     * |_|   |_| \_\\___/|____/ \___/ \____| |_| |___\___/|_| \_|
     *
     * The flags in this section are useful for test and production
     * environments.
     *
     */ -}}


{{- /*
     * runExecutorServer enables the executor GRPC service, which
     * provides a service to process transaction batches. This is used
     * by the Sequencer, Synchronizer and RPC. In the case of the RPC,
     * we can configure with `dbReadOnly' to true to prevent writing
     * to database
     */ -}}
    "runExecutorServer": true,

{{- /*
     * runHashDBServer enables HashDB GRPC service, which provides SMT
     * (Sparse Merkle Tree) and database access. Within the node, the
     * merkletree package uses this serves to read the state tree and
     * various components like the pool, sychronizer, and datastreamer
     * can use this service.
     *
     * Generally every instance of the prover or executor runs their
     * own instance of the Hash DB. Relying on a central or remote
     * HashDB tends to add a lot of latency overhead.
     */ -}}
    "runHashDBServer": true,

{{- /*
     * runAggregatorClient will run the aggregator GRPC client which
     * connects to the aggregator and processes the proof generation
     * requests. Running this service most likely requires 700GB+ of
     * physical memory.
     */ -}}
    "runAggregatorClient": false,

{{- /*
     * runAggregatorClientMock acts the same way as
     * `runAggregatorClient' but will generate a fake proof. This is
     * useful for Kurtosis and other environments where we want
     * everything to be as realistic as possible, but don't want to
     * run the full prover.
     */ -}}
    "runAggregatorClientMock": true,

{{- /*
     * aggregatorClientMockTimeout is the amount of time in
     * microseconds that the mock prover should spend proving. E.g. if
     * we wanted to simulate realistic proving times of three minutes,
     * we would set this to 180000000
     */ -}}
    "aggregatorClientMockTimeout": 1,

{{- /*
     * proverName is used to identify the prover when connecting to
     * the aggregator service
     */ -}}
    "proverName": "test-prover",

{{- /*
     * executeInParallel executes secondary state machines in
     * parallel, when possible
     */ -}}
    "executeInParallel": true,

{{- /*
     * useMainExecGenerated executes main state machines in generated
     * code, which is faster than native code
     */ -}}
    "useMainExecGenerated": true,

{{- /*
     * executorServerPort is the port that the executor server will
     * listen on. This is generally used within the `Executor.URI'
     * config within the node.
     */ -}}
    "executorServerPort": {{.zkevm_executor_port}},

{{- /*
     * hashDBServerPort is the HashDB server GRPC port that the node
     * will connect to. This is generally used with the `MTClient.URI'
     * setting within the node config.
     */ -}}
    "hashDBServerPort": {{.zkevm_hash_db_port}},

{{- /*
     * hashDBURL is the URL used by the Executor to connect to the
     * HashDB service. If set to `local', no GRPC is used and it
     * connects to the local HashDB interface using direct calls to
     * the HashDB classes. It's highly recommended to run HashDB
     * locally and configure this setting as `local'.
     *
     * The main reason why you might not do this is if your instances
     * don't have access to the database, but this will lead to a
     * pretty large performance trade-off
     */ -}}
    "hashDBURL": "local",

{{- /*
     * aggregatorClientPort is the grpc port that this prover will
     * attempt to use while connecting to the aggregator
     */ -}}
    "aggregatorClientPort": {{.zkevm_aggregator_port}},

{{- /*
     * aggregatorClientHost is the hostname that this prover will
     * attempt to use while connecting to the aggregator
     */ -}}
    "aggregatorClientHost": "zkevm-node-aggregator{{.deployment_suffix}}",

{{- /*
     * keccakScriptFile is the keccak-f state machine script file
     */ -}}
    "keccakScriptFile": "config/scripts/keccak_script.json",

{{- /*
     * storageRomFile is the path to the storage rom file
     */ -}}
    "storageRomFile": "config/scripts/storage_sm_rom.json",

{{- /*
     * databaseURL is the URL of the external database,
     * e.g. postgresql://statedb:statedb@127.0.0.1:5432/testdb, or
     * "local" if no external database is used (data will be stored in
     * cache)
     */ -}}
    "databaseURL": "postgresql://{{.prover_db.user}}:{{.prover_db.password}}@{{.prover_db.hostname}}:{{.prover_db.port}}/{{.prover_db.name}}",

{{- /*
     * dbNodesTableName is the schema and name of the nodes table in
     * the external database
     */ -}}
    "dbNodesTableName": "state.nodes",

{{- /*
     * dbProgramTableName is the schema and name of the programs
     * (smart contracts) table in the external database
     */ -}}
    "dbProgramTableName": "state.program",

{{- /*
     * dbMultiWrite will determine if we use Database multi-write
     * mechanism to send multiple write queries to database
     */ -}}
    "dbMultiWrite": true,

{{- /*
     * dbMTCacheSize is the size in MB of the merkle trie cache. For
     * the most part, you can probably leave this alone. The same is
     * true for dbProgramCacheSize.
     *
     * With additional tuning and testing you might determine that
     * larger cache sizes improve your performance, but keep in mind a
     * large cache will reduce the amount of memory that your system
     * has available to handle typical requests.
     */ -}}
    "dbMTCacheSize": 1024,

{{- /*
     * dbProgramCacheSize is the size in MB of the program cache.
     */ -}}
    "dbProgramCacheSize": 1024,

{{- /*
     * dbNumberOfPoolConnections is the size of the connection pool
     * for the database. Generally there must be one connection per
     * executor thread, prover thread, and hash db thread.
     */ -}}
    "dbNumberOfPoolConnections": 30,

{{- /*
     * dbGetTree will create and use a UDF within sql for getting the
     * tree
     */ -}}
    "dbGetTree": true,

{{- /*
     * cleanerPollingPeriod determines the frequency that we'll remove
     * requests from local memory. Requests older than
     * `requestsPersistence' will be purged every
     * `cleanerPollingPeriod' seconds
     */ -}}
    "cleanerPollingPeriod": 600,

{{- /*
     * requestsPersistence is the amount of time that completed
     * batches stay before being cleaned up
     */ -}}
    "requestsPersistence": 3600,

{{- /*
     * maxExecutorThreads is the maximum number of GRPC Executor
     * service threads. Based on the infrastructure, this can be a
     * critical setting. If it's too low, you might see issues about
     * resource exhaustion. If it's too high, you might need a lot of
     * memory to support many parallel requests.
     */ -}}
    "maxExecutorThreads": 20,

{{- /*
     * maxProverThreads maximum number of GRPC Prover service threads
     */ -}}
    "maxProverThreads": 8,

{{- /*
     * maxHashDBThreads maximum number of GRPC HashDB service threads
     */ -}}
    "maxHashDBThreads": 8,

{{- /*
     * stateManager will use the State Manager to consolidate states
     * before writing to Database
     */ -}}
    "stateManager": true,

{{- /*
     * useAssociativeCache to use associative cache as Database MT
     * cache, which is faster than regular cache
     */ -}}
    "useAssociativeCache": true,


{{- /***************************************************************************
     *  ____  _____ ____  _   _  ____    ___
     * |  _ \| ____| __ )| | | |/ ___|  ( _ )
     * | | | |  _| |  _ \| | | | |  _   / _ \/\
     * | |_| | |___| |_) | |_| | |_| | | (_>  <
     * |____/|_____|____/ \___/ \____|  \___/\/
     *
     *  ____  _______     _______ _     ___  ____  __  __ _____ _   _ _____
     * |  _ \| ____\ \   / / ____| |   / _ \|  _ \|  \/  | ____| \ | |_   _|
     * | | | |  _|  \ \ / /|  _| | |  | | | | |_) | |\/| |  _| |  \| | | |
     * | |_| | |___  \ V / | |___| |__| |_| |  __/| |  | | |___| |\  | | |
     * |____/|_____|  \_/  |_____|_____\___/|_|   |_|  |_|_____|_| \_| |_|
     *
     * The flags under this section are really only used for
     * development purposes. They generally don't need to be
     * configured unless you're collecting traces or doing development
     * on the prover itself
     *
     */ -}}
{{- /*
     * runExecutorClient runs an executor GRPC client to test the
     * executor GRPC service submitting a request based on the
     * `inputFile' parameter. Unless explicitly doing tests, this is
     * false.
     */ -}}
    "runExecutorClient": false,

{{- /*
     * runExecutorClientMultithread is another test flag which runs a
     * multithread Executor GRPC client to test the Executor GRPC
     * service. It performs the same test as `runExecutorClient' but
     * it spawns several threads to run the test in parallel
     */ -}}
    "runExecutorClientMultithread": false,

{{- /*
     * runHashDBTest runs a HashDB test to validate the HashDB
     * service. This is pretty much always false unless explicitly
     * doing some test.
     */ -}}
    "runHashDBTest": false,

{{- /*
     * runAggregatorServer will run an Aggregator GRPC service to test
     * the Aggregator GRPC client
     */ -}}
    "runAggregatorServer": false,

{{- /*
     * runFileGenBatchProof submits an input json file, defined in the
     * `inputFile' parameter, to generate a regursive proof.  This
     * does not use GRPC
     */ -}}
    "runFileGenBatchProof": false,

{{- /*
     * runFileGenAggregatedProof submits two recursive proof files,
     * defined in the `inputFile' and `inputFile2' parameters, to
     * generate a recursive proof. This does not use GRPC
     */ -}}
    "runFileGenAggregatedProof": false,

{{- /*
     * runFileGenFinalProof submits a recursive proof file, defined in
     * the `inputFile' parameter, to generate a final proof. This does
     * not use GRPC
     */ -}}
    "runFileGenFinalProof": false,

{{- /*
     * runFileProcessBatch submits an input json file, defined in the
     * `inputFile' parameter, to process a batch. This does not use
     * GRPC
     */ -}}
    "runFileProcessBatch": false,

{{- /*
     * runFileProcessBatchMultithread submits an input json file,
     * defined in the `inputFile' parameter, to process a batch,
     * multiple times in parallel. This does not use GRPC
     */ -}}
    "runFileProcessBatchMultithread": false,

{{- /*
     * runKeccakScriptGenerator runs a Keccak-f hash that generates a
     * Keccak script json file to be used by the Keccak secondary
     * state machine executor
     */ -}}
    "runKeccakScriptGenerator": false,

{{- /*
     * runKeccakTest runs a Keccak-f hash test
     */ -}}
    "runKeccakTest": false,

{{- /*
     * runStorageSMTest runs a storage state machine test
     */ -}}
    "runStorageSMTest": false,

{{- /*
     * runBinarySMTest runs a binary state machine test
     */ -}}
    "runBinarySMTest": false,

{{- /*
     * runMemAlignSMTest runs a memory alignment state machine test
     */ -}}
    "runMemAlignSMTest": false,

{{- /*
     * runSHA256Test runs a SHA-256 hash test
     */ -}}
    "runSHA256Test": false,

{{- /*
     * runBlakeTest runs a Blake hash test
     */ -}}
    "runBlakeTest": false,

{{- /*
     * saveRequestToFile saves executor GRPC requests to file, in text
     * format. This can be very useful when debugging isolating issues
     * within the executor.
     */ -}}
    "saveRequestToFile": false,

{{- /*
     * saveInputToFile saves executor GRPC input to file, in JSON
     * format. This can also be very useful when debugging issues and
     * reproducing behaviors within the executor.
     */ -}}
    "saveInputToFile": false,

{{- /*
     * saveDbReadsToFile saves executor reads to database to file,
     * together with the input, in JSON format. The resulting file can
     * be used as a self-contained input file that does not depend on
     * any external database. This particular option is very useful if
     * trouble shooting performance issues.
     */ -}}
    "saveDbReadsToFile": false,

{{- /*
     * saveDbReadsToFileOnChange saves executor reads to database to
     * file, together with the input, in JSON format, updating the
     * file every time a new read happens. This is useful to reproduce
     * main executor errors. The resulting file can be used as a
     * self-contained input file that does not depend on any external
     * database
     */ -}}
    "saveDbReadsToFileOnChange": false,

{{- /*
     * saveOutputToFile saves executor GRPC output to file, in JSON
     * format
     */ -}}
    "saveOutputToFile": true,

{{- /*
     * saveProofToFile saves generated proof to file, in JSON format
     */ -}}
    "saveProofToFile": true,

{{- /*
     * saveResponseToFile Saves executor GRPC response to file, in
     * text format
     */ -}}
    "saveResponseToFile": false,

{{- /*
     * loadDBToMemCache fill database cache with content during
     * initialization
     */ -}}
    "loadDBToMemCache": false,

{{- /*
     * opcodeTracer will generate main state machine executor opcode
     * statistics
     */ -}}
    "opcodeTracer": false,

{{- /*
     * logRemoteDbReads will log main state machine executor remote
     * database reads
     */ -}}
    "logRemoteDbReads": false,

{{- /*
     * logExecutorServerResponses will log executor server responses
     */ -}}
    "logExecutorServerResponses": false,

{{- /*
     * executorROMLineTraces if true, the main state machine executor
     * will log the content of every executed ROM program line. This
     * only works with native main executor, not with generated code
     * executor (i.e. `useMainExecGenerated' must be false for this to
     * work)
     */ -}}
    "executorROMLineTraces": false,

{{- /*
     * executorClientPort is the executor client GRPC port it connects
     * to
     */ -}}
    "executorClientPort": {{.zkevm_executor_port}},

{{- /*
     * executorClientHost is the executor host that the client will
     * connect to
     */ -}}
    "executorClientHost": "127.0.0.1",

{{- /*
     * aggregatorServerPort is the aggregator server GRPC port
     */ -}}
    "aggregatorServerPort": {{.zkevm_aggregator_port}},


{{- /*
     * mapConstPolsFile will map constant polynomials file to memory
     */ -}}
    "mapConstPolsFile": false,

{{- /*
     * mapConstantsTreeFile will map constant polynomials tree file to
     * memory
     */ -}}
    "mapConstantsTreeFile": false,

{{- /*
     * inputFile is the path to the input file used in various tests
     */ -}}
    "inputFile": "input_executor_0.json",

{{- /*
     * inputFile2 is the path to the second input file. It's used as
     * the second input in `genAggregatedProof'
     */ -}}
    "inputFile2": "input_executor_1.json",

{{- /*
     * outputPath is the place where saved files will end up. A lot of
     * the debug options will write data to this path.
     */ -}}
    "outputPath": "output",

{{- /*
     * ECRecoverPrecalc will use ECRecover precalculation to improve
     * main state machine executor performance
     *
     * Note: this function is for testing. Not meant for production environments at this time
     */ -}}
    "ECRecoverPrecalc": false,

{{- /*
     * ECRecoverPrecalcNThreads is the number of threads used to
     * perform the ECRecover precalculation
     */ -}}
    "ECRecoverPrecalcNThreads": 4

}
