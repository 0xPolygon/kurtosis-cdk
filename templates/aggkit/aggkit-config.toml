# ==============================================================================
#     _    ____  ____ _  _____ _____
#    / \  / ___|/ ___| |/ /_ _|_   _|
#   / _ \| |  _| |  _| ' / | |  | |
#  / ___ \ |_| | |_| | . \ | |  | |
# /_/   \_\____|\____|_|\_\___| |_|
#
# This is a reference config file used by the Kurtosis CDK Testing
# setup. The values here should work, but are necessarily meant for
# production environments. DYOR
# The below configs are the default mandatory parameters to be used.
# ==============================================================================

PathRWData = "{{.zkevm_path_rw_data}}"
L1URL = "{{.l1_rpc_url}}"
{{- if .deploy_optimism_rollup }}
L2URL = "{{.op_el_rpc_url}}"
{{- else }}
L2URL = "{{.l2_rpc_url}}"
{{- end }}

# Check if agglayer grpc or readrpc should be used for AggLayerURL
{{- if eq .agglayer_endpoint "grpc" }}
AggLayerURL = "{{.agglayer_grpc_url}}"
{{- else }}
AggLayerURL = "{{.agglayer_readrpc_url}}"
{{- end }}

AggchainProofURL= "{{.aggkit_prover_grpc_url_prefix}}{{.deployment_suffix}}:{{.aggkit_prover_grpc_port}}"

NetworkID = {{.zkevm_rollup_id}}

{{- if or .deploy_optimism_rollup (eq .consensus_contract_type "pessimistic") }}
SequencerPrivateKeyPath = "/etc/aggkit/sequencer.keystore"
SequencerPrivateKeyPassword  = "{{.zkevm_l2_keystore_password}}"
{{- else }}
SequencerPrivateKeyPath = ""
SequencerPrivateKeyPassword  = ""
{{- end}}

polygonBridgeAddr = "{{.zkevm_bridge_address}}"

{{- if .deploy_optimism_rollup }}
RPCURL = "{{.op_el_rpc_url}}"
{{- end}}

# These values can be overridden directly from genesis.json
rollupCreationBlockNumber = "{{.zkevm_rollup_manager_block_number}}"
rollupManagerCreationBlockNumber = "{{.zkevm_rollup_manager_block_number}}"
genesisBlockNumber = "{{.zkevm_rollup_manager_block_number}}"
# ------------------------------------------------------------------------------

# ==============================================================================
#  _     _  ____ ___  _   _ _____ ___ ____
# | |   / |/ ___/ _ \| \ | |  ___|_ _/ ___|
# | |   | | |  | | | |  \| | |_   | | |  _
# | |___| | |__| |_| | |\  |  _|  | | |_| |
# |_____|_|\____\___/|_| \_|_|   |___\____|
#
# ------------------------------------------------------------------------------
[L1Config]
# ------------------------------------------------------------------------------
# URL is the L1 network url
# ------------------------------------------------------------------------------
URL = "{{.l1_rpc_url}}"

# ------------------------------------------------------------------------------
# L1 chain id
# ------------------------------------------------------------------------------
chainId = "{{.l1_chain_id}}"

# ------------------------------------------------------------------------------
# Address of the zkevm global exit root contract on L1
# ------------------------------------------------------------------------------
polygonZkEVMGlobalExitRootAddress = "{{.zkevm_global_exit_root_address}}"

# ------------------------------------------------------------------------------
# Address of the rollup manager contract on L1
# ------------------------------------------------------------------------------
polygonRollupManagerAddress = "{{.zkevm_rollup_manager_address}}"

# ------------------------------------------------------------------------------
# Address of the pol token address on L1
# ------------------------------------------------------------------------------
polTokenAddress = "{{.pol_token_address}}"

# ------------------------------------------------------------------------------
# Address of the sovereign rollup contract on L2
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
polygonZkEVMAddress = "{{.sovereign_rollup_addr}}"
{{- else }}
polygonZkEVMAddress = "{{.zkevm_rollup_address}}"
{{- end }}

# ==============================================================================
#  _     ____   ____ ___  _   _ _____ ___ ____
# | |   |___ \ / ___/ _ \| \ | |  ___|_ _/ ___|
# | |     __) | |  | | | |  \| | |_   | | |  _
# | |___ / __/| |__| |_| | |\  |  _|  | | |_| |
# |_____|_____|\____\___/|_| \_|_|   |___\____|
#
# ------------------------------------------------------------------------------
[L2Config]
# ------------------------------------------------------------------------------
# Address of the sovereign global exit root proxy contract on L2
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
GlobalExitRootAddr = "{{.sovereign_ger_proxy_addr}}"
{{- else }}
GlobalExitRootAddr = "{{.zkevm_global_exit_root_l2_address}}"
{{- end }}

# ==============================================================================
#  _     ___   ____
# | |   / _ \ / ___|
# | |  | | | | |  _
# | |__| |_| | |_| |
# |_____\___/ \____|
#
# ------------------------------------------------------------------------------
[Log]
# ------------------------------------------------------------------------------
# Environment generally dictates the format of the logs and the
# sampling rate. We often default to production even for development
# because of the JSON encoding.
#
# https://github.com/uber-go/zap/blob/a55bdc32f526699c3b4cc51a2cc97e944d02fbbf/config.go#L120
# https://github.com/uber-go/zap/blob/a55bdc32f526699c3b4cc51a2cc97e944d02fbbf/config.go#L161
# ------------------------------------------------------------------------------
Environment = "production" # "production" or "development"

# ------------------------------------------------------------------------------
# Level determines the log level that will be written to the
# log. Generally we'll switch to debug if we want to troubleshoot
# something specifically otherwise we leave it at info
# ------------------------------------------------------------------------------
Level = "{{.global_log_level}}"

# ------------------------------------------------------------------------------
# Outputs define the output paths for writing logs. The default is to
# write to stderr, but other output paths should be supported
#
# https://github.com/uber-go/zap/blob/a55bdc32f526699c3b4cc51a2cc97e944d02fbbf/writer.go#L32-L50
# ------------------------------------------------------------------------------
Outputs = ["stderr"]

# ==============================================================================
# ____  ____   ____
# |  _ \|  _ \ / ___|
# | |_) | |_) | |
# |  _ <|  __/| |___
# |_| \_\_|    \____|
#
# ------------------------------------------------------------------------------
[RPC]
# ------------------------------------------------------------------------------
# Port will configure the port that the JSON RPC server will listen on
# ------------------------------------------------------------------------------
Port = "{{.cdk_node_rpc_port}}"

# ==============================================================================
#  ____  _____ ____ _____
# |  _ \| ____/ ___|_   _|
# | |_) |  _| \___ \ | |
# |  _ <| |___ ___) || |
# |_| \_\_____|____/ |_|
#
# ------------------------------------------------------------------------------
[REST]
# ------------------------------------------------------------------------------
# Port will configure the port that the REST API HTTP server will
# listen on
# ------------------------------------------------------------------------------
Port = "{{.aggkit_node_rest_api_port}}"

# ==============================================================================
#     _    ____  ____ ____  _____ _   _ ____  _____ ____
#    / \  / ___|/ ___/ ___|| ____| \ | |  _ \| ____|  _ \
#   / _ \| |  _| |  _\___ \|  _| |  \| | | | |  _| | |_) |
#  / ___ \ |_| | |_| |___) | |___| |\  | |_| | |___|  _ <
# /_/   \_\____|\____|____/|_____|_| \_|____/|_____|_| \_\
#
# ------------------------------------------------------------------------------
[AggSender]
# ------------------------------------------------------------------------------
# StoragePath is the path of the sqlite db for the AggSender to store the data
# ------------------------------------------------------------------------------
# StoragePath = "/tmp"

# ------------------------------------------------------------------------------
# AggsenderPrivateKey is the private key which is used to sign certificates
# ------------------------------------------------------------------------------
AggSenderPrivateKey = {Path = "/etc/aggkit/sequencer.keystore", Password = "{{.zkevm_l2_keystore_password}}"}

{{- if eq .consensus_contract_type "pessimistic"}}
Mode = "PessimisticProof"
{{- else}}
Mode = "AggchainProof"
{{- end}}
CheckStatusCertificateInterval = "1s"

# ------------------------------------------------------------------------------
# MaxCertSize is the maximum size of the certificate
# i.e (the emitted certificate cannot be bigger that this size)
# 0 is infinite
# ------------------------------------------------------------------------------
# MaxCertSize = 0

{{- if .use_agg_sender_validator }}
{{- if eq .consensus_contract_type "pessimistic"}}
RequireValidatorCall = true
{{- else}}
RequireValidatorCall = false
{{- end}}
[AggSender.ValidatorClient]
URL = "aggkit-validator{{.deployment_suffix}}:{{.aggkit_validator_grpc_port}}"
{{- end }}



[AggSender.AggkitProverClient]
UseTLS = false

{{- if eq .consensus_contract_type "fep"}}
[AggSender.OptimisticModeConfig]
SovereignRollupAddr = "{{.sovereign_rollup_addr}}"
TrustedSequencerKey = {Path = "/etc/aggkit/sequencer.keystore", Password = "{{.zkevm_l2_keystore_password}}"}
OpNodeURL = "{{.op_cl_rpc_url}}"
RequireKeyMatchTrustedSequencer = true
{{- end}}

[AggSender.MaxSubmitCertificateRate]
NumRequests = 20
Interval = "1m"

# ------------------------------------------------------------------------------
# URLRPCL2 is the URL of the L2 RPC node
# ------------------------------------------------------------------------------
# URLRPCL2 = "{{.op_el_rpc_url}}"

# ------------------------------------------------------------------------------
# BlockFinality indicates which finality follows AggLayer accepted values are:
# LatestBlock, SafeBlock, PendingBlock, FinalizedBlock, EarliestBlock
# Default value is "LatestBlock"
# ------------------------------------------------------------------------------
BlockFinality = "LatestBlock"

# ------------------------------------------------------------------------------
# EpochNotificationPercentage indicates the percentage of the epoch
# the AggSender should send the certificate
# 0 -> Begin
# 50 -> Middle
# ------------------------------------------------------------------------------
# EpochNotificationPercentage = 50

# ------------------------------------------------------------------------------
# AggSender will save the certificates to a file in this path
# ------------------------------------------------------------------------------
SaveCertificatesToFilesPath = "/tmp"

# ------------------------------------------------------------------------------
# MaxRetriesStoreCertificate is the maximum number of retries to store a certificate
# 0 is infinite
# ------------------------------------------------------------------------------
# MaxRetriesStoreCertificate = 3

# ------------------------------------------------------------------------------
# DelayBetweenRetries is the delay between retries
# Duration expressed in units: [ns, us, ms, s, m, h, d]"
# ------------------------------------------------------------------------------
# DelayBetweenRetries = 5s

# ------------------------------------------------------------------------------
# KeepCertificatesHistory is a flag to keep the certificates history on storage
# ------------------------------------------------------------------------------
# KeepCertificatesHistory = false

# ------------------------------------------------------------------------------
# BridgeMetadataAsHash is a flag to import the bridge metadata as hash
# ------------------------------------------------------------------------------
# BridgeMetadataAsHash = false

# ------------------------------------------------------------------------------
# DryRun is a flag to enable the dry run mode
# in this mode the AggSender will not send the certificates to Agglayer
# ------------------------------------------------------------------------------
# DryRun = false

# ------------------------------------------------------------------------------
# EnableRPC is a flag to enable the RPC for aggsender
# ------------------------------------------------------------------------------
# EnableRPC = false

{{- if .use_agg_sender_validator }}
[AggSender.AgglayerClient]
Cached = true
[ValidaAggSendertor.AgglayerClient.ConfigurationCache]
TTL = "15m"
Capacity = 100
[AggSender.AgglayerClient.GRPC]
URL = "{{.agglayer_grpc_url}}"
MinConnectTimeout = "5s"
RequestTimeout = "300s"
UseTLS = false
[AggSender.AgglayerClient.GRPC.Retry]
InitialBackoff = "1s"
MaxBackoff = "10s"
BackoffMultiplier = 2.0
MaxAttempts = 20
{{- end }}

# ------------------------------------------------------------------------------
# RetryCertAfterInError when a cert pass to 'InError'state
# the AggSender will try to resend it immediately
# ------------------------------------------------------------------------------
# RetryCertAfterInError = false

# ------------------------------------------------------------------------------
# RequireNoFEPBlockGap is true if the AggSender should not accept a gap between
# lastBlock from lastCertificate and first block of FEP
# ------------------------------------------------------------------------------
# RequireNoFEPBlockGap = false

# ------------------------------------------------------------------------------
# RequireOneBridgeInPPCertificate is a flag to force the AggSender to have at least one bridge exit
# for the Pessimistic Proof certificates
# ------------------------------------------------------------------------------
# RequireOneBridgeInPPCertificate = false

# ------------------------------------------------------------------------------
# MaxL2BlockNumber is the last L2 block number that is going to be included in a certificate
# 0 means disabled
# ------------------------------------------------------------------------------
# MaxL2BlockNumber = 0

# ------------------------------------------------------------------------------
# StopOnFinishedSendingAllCertificates is a flag to stop the AggSender when it finishes sending all certificates
# up to MaxL2BlockNumber
# ------------------------------------------------------------------------------
# StopOnFinishedSendingAllCertificates = false

# ==============================================================================
#     _    ____  ____  ___  ____      _    ____ _     _____
#    / \  / ___|/ ___|/ _ \|  _ \    / \  / ___| |   | ____|
#   / _ \| |  _| |  _| | | | |_) |  / _ \| |   | |   |  _|
#  / ___ \ |_| | |_| | |_| |  _ <  / ___ \ |___| |___| |___
# /_/   \_\____|\____|\___/|_| \_\/_/   \_\____|_____|_____|
#
# ------------------------------------------------------------------------------
[AggOracle]
# ------------------------------------------------------------------------------
# TargetChainType currently only supports "EVM"
# ------------------------------------------------------------------------------
# TargetChainType = "EVM"

# ------------------------------------------------------------------------------
# URLRPCL1 is the URL of the L1 RPC node
# ------------------------------------------------------------------------------
# URLRPCL1 = "{{.l1_rpc_url}}"

# ------------------------------------------------------------------------------
# Duration expressed in units: [ns, us, ms, s, m, h, d]"
# ------------------------------------------------------------------------------
WaitPeriodNextGER = "10s"

# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
{{- if .use_agg_oracle_committee }}
EnableAggOracleCommittee = true
{{- else }}
EnableAggOracleCommittee = false
{{- end }}

[AggOracle.EVMSender]
# ------------------------------------------------------------------------------
# Address of the sovereign global exit root proxy contract on L2
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
GlobalExitRootL2 = "{{.sovereign_ger_proxy_addr}}"
{{- else }}
GlobalExitRootL2 = "{{.zkevm_global_exit_root_l2_address}}"
{{- end }}

# ------------------------------------------------------------------------------
# URLRPCL2 is the URL of the L2 RPC node
# ------------------------------------------------------------------------------
# URLRPCL2 = "{{.op_el_rpc_url}}"

# ------------------------------------------------------------------------------
# GasOffset is the gas to add on the estimated gas when sending the claim txs
# ------------------------------------------------------------------------------
# GasOffset = 0

# ------------------------------------------------------------------------------
# Duration expressed in units: [ns, us, ms, s, m, h, d]"
# ------------------------------------------------------------------------------
WaitPeriodMonitorTx = "10s"

# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------
{{- if .use_agg_oracle_committee }}
AggOracleCommitteeAddr = "{{ .agg_oracle_committee_address }}"
{{- end }}

[AggOracle.EVMSender.EthTxManager]
# ------------------------------------------------------------------------------
# PrivateKeys defines all the key store files that are going
# to be read in order to provide the private keys to sign the L1 txs
# ------------------------------------------------------------------------------
{{- if .use_agg_oracle_committee }}
PrivateKeys = [{Path = "/etc/aggkit/aggoracle-{{.committee_member_index}}.keystore", Password = "{{.zkevm_l2_keystore_password}}"}]
{{- else }}
PrivateKeys = [{Path = "/etc/aggkit/aggoracle.keystore", Password = "{{.zkevm_l2_keystore_password}}"}]
{{- end }}

# ------------------------------------------------------------------------------
# FrequencyToMonitorTxs frequency of the resending failed txs
# Duration expressed in units: [ns, us, ms, s, m, h, d]"
# ------------------------------------------------------------------------------
# FrequencyToMonitorTxs = "1s"

# ------------------------------------------------------------------------------
# WaitTxToBeMined time to wait after transaction was sent to the ethereum
# ------------------------------------------------------------------------------
# WaitTxToBeMined = "2s"

# ------------------------------------------------------------------------------
# GetReceiptMaxTime is the max time to wait to get the receipt of the mined transaction
# ------------------------------------------------------------------------------
# GetReceiptMaxTime = "250ms"

# ------------------------------------------------------------------------------
# GetReceiptWaitInterval is the time to sleep before trying to get the receipt of the mined transaction
# ------------------------------------------------------------------------------
# GetReceiptWaitInterval = "1s"

# ------------------------------------------------------------------------------
# ForcedGas is the amount of gas to be forced in case of gas estimation error
# ------------------------------------------------------------------------------
# ForcedGas = 0

# ------------------------------------------------------------------------------
# GasPriceMarginFactor is used to multiply the suggested gas price provided by the network
# in order to allow a different gas price to be set for all the transactions and making it
# easier to have the txs prioritized in the pool, default value is 1.
#
# example:
# suggested gas price: 100
# GasPriceMarginFactor: 1
# gas price = 100
#
# suggested gas price: 100
# GasPriceMarginFactor: 1.1
# gas price = 110
# ------------------------------------------------------------------------------
# GasPriceMarginFactor = 1

# ------------------------------------------------------------------------------
# MaxGasPriceLimit helps avoiding transactions to be sent over an specified
# gas price amount, default value is 0, which means no limit.
# If the gas price provided by the network and adjusted by the GasPriceMarginFactor
# is greater than this configuration, transaction will have its gas price set to
# the value configured in this config as the limit.
#
# example:
# suggested gas price: 100
# gas price margin factor: 20%
# max gas price limit: 150
# tx gas price = 120
#
# suggested gas price: 100
# gas price margin factor: 20%
# max gas price limit: 110
# tx gas price = 110
# ------------------------------------------------------------------------------
# MaxGasPriceLimit = 0

# ------------------------------------------------------------------------------
# StoragePath is the path of the internal storage
# ------------------------------------------------------------------------------
# StoragePath = "{{.zkevm_path_rw_data}}/ethtxmanager-aggoracle.sqlite"

# ------------------------------------------------------------------------------
# ReadPendingL1Txs is a flag to enable the reading of pending L1 txs
# It can only be enabled if DBPath is empty
# ------------------------------------------------------------------------------
# ReadPendingL1Txs = false

# ------------------------------------------------------------------------------
# SafeStatusL1NumberOfBlocks overwrites the number of blocks to consider a tx as safe
# overwriting the default value provided by the network
# 0 means that the default value will be used
# ------------------------------------------------------------------------------
# SafeStatusL1NumberOfBlocks = 5

# ------------------------------------------------------------------------------
# FinalizedStatusL1NumberOfBlocks overwrites the number of blocks to
# consider a tx as finalized overwriting the default value provided by the network
# 0 means that the default value will be used
# ------------------------------------------------------------------------------
# FinalizedStatusL1NumberOfBlocks = 10

[AggOracle.EVMSender.EthTxManager.Etherman]
# ------------------------------------------------------------------------------
# Needs to be set to be the sovereign L2 chain id
# ------------------------------------------------------------------------------
L1ChainID = "{{.zkevm_rollup_chain_id}}"

# ==============================================================================
#  ____  ____  ___ ____   ____ _____ _     ____  ______   ___   _  ____
# | __ )|  _ \|_ _|  _ \ / ___| ____| |   |___ \/ ___\ \ / / \ | |/ ___|
# |  _ \| |_) || || | | | |  _|  _| | |     __) \___ \\ V /|  \| | |
# | |_) |  _ < | || |_| | |_| | |___| |___ / __/ ___) || | | |\  | |___
# |____/|_| \_\___|____/ \____|_____|_____|_____|____/ |_| |_| \_|\____|
# ------------------------------------------------------------------------------
[BridgeL2Sync]
# ------------------------------------------------------------------------------
# BridgeAddr is the address of the sovereign bridge contract on L2
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
BridgeAddr = "{{.sovereign_bridge_proxy_addr}}"
{{- else }}
BridgeAddr = "{{.zkevm_bridge_l2_address}}"
{{- end }}

# ------------------------------------------------------------------------------
# DBPath path of the sqlite db
# ------------------------------------------------------------------------------
# DBPath = "{{.zkevm_path_rw_data}}/bridgel2sync.sqlite"

# ------------------------------------------------------------------------------
# BlockFinality indicates the status of the blocks that will be queried to sync
# LatestBlock, SafeBlock, PendingBlock, FinalizedBlock, EarliestBlock
# Default value is "LatestBlock"
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
BlockFinality = "FinalizedBlock"
{{- else }}
BlockFinality = "LatestBlock"
{{- end }}

# ------------------------------------------------------------------------------
# First block that will be queried when starting the synchronization from scratch.
# It should be a number equal or bellow the creation of the bridge contract
# ------------------------------------------------------------------------------
# InitialBlockNum = 0

# ------------------------------------------------------------------------------
# The amount of blocks that will be queried to the client on each request
# ------------------------------------------------------------------------------
# SyncBlockChunkSize = 100

# ------------------------------------------------------------------------------
# The time that will be waited when an unexpected error happens before retry
# ------------------------------------------------------------------------------
# RetryAfterErrorPeriod = "1s"

# ------------------------------------------------------------------------------
# The maximum number of consecutive attempts that will happen before panic.
# Any number smaller than zero will be considered as unlimited retries
# ------------------------------------------------------------------------------
# MaxRetryAttemptsAfterError = -1

# ------------------------------------------------------------------------------
# Time that will be waited when the synchronizer has reached the latest block
# ------------------------------------------------------------------------------
# WaitForNewBlocksPeriod = "3s"

# ==============================================================================
#  _     _ ___ _   _ _____ ___ _____ ____  _____ _____ ______   ___   _  ____
# | |   / |_ _| \ | |  ___/ _ \_   _|  _ \| ____| ____/ ___\ \ / / \ | |/ ___|
# | |   | || ||  \| | |_ | | | || | | |_) |  _| |  _| \___ \\ V /|  \| | |
# | |___| || || |\  |  _|| |_| || | |  _ <| |___| |___ ___) || | | |\  | |___
# |_____|_|___|_| \_|_|   \___/ |_| |_| \_\_____|_____|____/ |_| |_| \_|\____|
#
# ------------------------------------------------------------------------------
[L1InfoTreeSync]
# ------------------------------------------------------------------------------
# The initial block number from which to start syncing.
# Default: 0
# ------------------------------------------------------------------------------
InitialBlock = "{{.zkevm_rollup_manager_block_number}}"

# ==============================================================================
#  _     ____   ____ _____ ____  ______   ___   _  ____ 
# | |   |___ \ / ___| ____|  _ \/ ___\ \ / / \ | |/ ___|
# | |     __) | |  _|  _| | |_) \___ \\ V /|  \| | |    
# | |___ / __/| |_| | |___|  _ < ___) || | | |\  | |___ 
# |_____|_____|\____|_____|_| \_\____/ |_| |_| \_|\____|
# ==============================================================================
[L2GERSync]
# ------------------------------------------------------------------------------
# BlockFinality indicates which finality follows AggLayer accepted values are:
# LatestBlock, SafeBlock, PendingBlock, FinalizedBlock, EarliestBlock
# Default value is "LatestBlock"
# ------------------------------------------------------------------------------
BlockFinality = "LatestBlock"

# ==============================================================================
#   ____ _        _    ___ __  __ ____  ____   ___  _   _ ____   ___  ____
#  / ___| |      / \  |_ _|  \/  / ___||  _ \ / _ \| \ | / ___| / _ \|  _ \
# | |   | |     / _ \  | || |\/| \___ \| |_) | | | |  \| \___ \| | | | |_) |
# | |___| |___ / ___ \ | || |  | |___) |  __/| |_| | |\  |___) | |_| |  _ <
#  \____|_____/_/   \_\___|_|  |_|____/|_|    \___/|_| \_|____/ \___/|_| \_\
# ------------------------------------------------------------------------------
[ClaimSponsor]
# ------------------------------------------------------------------------------
# Path of the DB
# ------------------------------------------------------------------------------
DBPath = "{{.zkevm_path_rw_data}}/claimsponsor.sqlite"

# ------------------------------------------------------------------------------
# Enabled indicates if the sponsor should be run or not
# ------------------------------------------------------------------------------
Enabled = "{{.enable_aggkit_claim_sponsor}}"

# ------------------------------------------------------------------------------
# SenderAddr is the address that will be used to send the claim txs
# ------------------------------------------------------------------------------
SenderAddr = "{{.zkevm_l2_claimsponsor_address}}"

# ------------------------------------------------------------------------------
# BridgeAddrL2 is the address of the bridge smart contract on L2
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
BridgeAddrL2 = "{{.sovereign_bridge_proxy_addr}}"
{{- else }}
BridgeAddrL2 = "{{.zkevm_bridge_l2_address}}"
{{- end }}

[ClaimSponsor.EthTxManager]
# ------------------------------------------------------------------------------
# PrivateKeys defines all the key store files that are going
# to be read in order to provide the private keys to sign the L1 txs
# ------------------------------------------------------------------------------
PrivateKeys = [
    {Path = "/etc/aggkit/claimsponsor.keystore", Password = "{{.zkevm_l2_keystore_password}}"},
]

# ------------------------------------------------------------------------------
# StoragePath is the path of the internal storage
# ------------------------------------------------------------------------------
StoragePath = "{{.zkevm_path_rw_data}}/ethtxmanager-claimsponsor.sqlite"

[ClaimSponsor.EthTxManager.Etherman]
# ------------------------------------------------------------------------------
# URL is the URL of the Ethereum node for L2
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
URL = "{{.op_el_rpc_url}}"
{{- else }}
URL= "{{.l2_rpc_url}}"
{{- end }}

# ------------------------------------------------------------------------------
# Needs to be set to be the sovereign L2 chain id
# If set to 0, the chain ID will be fetched from the RPC endpoint
# ------------------------------------------------------------------------------
L1ChainID = "{{.zkevm_rollup_chain_id}}"

# ==============================================================================
#                        _           _                              __
#  __ _  __ _  __ _  ___| |__   __ _(_)_ __  _ __  _ __ ___   ___  / _| __ _  ___ _ __
# / _` |/ _` |/ _` |/ __| '_ \ / _` | | '_ \| '_ \| '__/ _ \ / _ \| |_ / _` |/ _ \ '_ \
#| (_| | (_| | (_| | (__| | | | (_| | | | | | |_) | | | (_) | (_) |  _| (_| |  __/ | | |
# \__,_|\__, |\__, |\___|_| |_|\__,_|_|_| |_| .__/|_|  \___/ \___/|_|  \__, |\___|_| |_|
#       |___/ |___/                         |_|                        |___/
# ------------------------------------------------------------------------------
[AggchainProofGen]
# ------------------------------------------------------------------------------
# SovereignRollupAddr is the address of the sovereign rollup contract on L1
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
SovereignRollupAddr = "{{.sovereign_rollup_addr}}"
{{- else }}
SovereignRollupAddr = "{{.zkevm_rollup_address}}"
{{- end }}

# ------------------------------------------------------------------------------
# GlobalExitRootL2Addr is the address of the GlobalExitRootManager contract on l2 sovereign chain
# this address is needed for the AggchainProof mode of the AggSender
# ------------------------------------------------------------------------------
{{- if .deploy_optimism_rollup }}
GlobalExitRootL2 = "{{.sovereign_ger_proxy_addr}}"
{{- else }}
GlobalExitRootL2 = "{{.zkevm_global_exit_root_l2_address}}"
{{- end }}

[AggchainProofGen.AggkitProverClient]
# ------------------------------------------------------------------------------
# UseTLS is a flag to enable the AggkitProver TLS handshake in the AggSender-AggkitProver gRPC connection
# ------------------------------------------------------------------------------
# UseTLS = false

# ==============================================================================
#  ____             __ _ _ _
# |  _ \ _ __ ___  / _(_) (_)_ __   __ _
# | |_) | '__/ _ \| |_| | | | '_ \ / _` |
# |  __/| | | (_) |  _| | | | | | | (_| |
# |_|   |_|  \___/|_| |_|_|_|_| |_|\__, |
#                                  |___/
# ------------------------------------------------------------------------------
[Profiling]
# ------------------------------------------------------------------------------
# ProfilingHost is the address to bind the profiling server
# Default: "localhost"
# ------------------------------------------------------------------------------
ProfilingHost = "0.0.0.0"

# ------------------------------------------------------------------------------
# ProfilingPort is the port to bind the profiling server
# Default: 6060
# ------------------------------------------------------------------------------
ProfilingPort = {{.aggkit_pprof_port}}

# ------------------------------------------------------------------------------
# ProfilingEnabled is the flag to enable/disable the profiling server
# Default: false
# ------------------------------------------------------------------------------
ProfilingEnabled = {{.aggkit_pprof_enabled}}


# https://github.com/agglayer/aggkit/pull/744
[Validator]
EnableRPC = true
# Signer = { Method = "mock" }
Signer = { Method = "local", Path = "/etc/aggkit/aggkitvalidator.keystore", Password = "{{.zkevm_l2_keystore_password}}" }


[Validator.ServerConfig]
Host = "0.0.0.0"
Port = {{.aggkit_validator_grpc_port}}
MaxDecodingMessageSize = 1073741824  # 1GB

# Is it necessary to specify all of these values again?
[Validator.LerQuerierConfig]
RollupManagerAddr = "{{.zkevm_rollup_manager_address}}"
RollupCreationBlockL1 = "{{.zkevm_rollup_manager_block_number}}"

[Validator.AgglayerClient]
Cached = true

[Validator.AgglayerClient.ConfigurationCache]
TTL = "15m"
Capacity = 100

[Validator.AgglayerClient.GRPC]
URL = "{{.agglayer_grpc_url}}"
UseTLS = false

